// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  changesets    Changeset[]
  adminLogs     AdminLog[]
  siteOwners    SiteOwner[]
  siteMembers   SiteMember[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

model Site {
  id                String    @id @default(cuid())
  name              String
  url               String    @unique
  siteType          SiteType
  isHub             Boolean   @default(false)
  isSpoke           Boolean   @default(false)
  parentHubId       String?
  division          String?
  lastActivity      DateTime?
  fileCount         Int       @default(0)
  storageUsed       Float     @default(0)
  storagePercentage Float     @default(0)
  isAssociatedWithTeam Boolean @default(false)
  teamId            String?
  teamName          String?
  createdBy         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  parentHub         Site?     @relation("HubSpoke", fields: [parentHubId], references: [id])
  spokes            Site[]    @relation("HubSpoke")
  owners            SiteOwner[]
  members           SiteMember[]
  changesets        SiteChangeset[]

  @@map("sites")
}

enum SiteType {
  HUB
  SPOKE
  SUBHUB
}

model SiteOwner {
  id     String @id @default(cuid())
  siteId String
  userId String
  role   String @default("Owner")

  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([siteId, userId])
  @@map("site_owners")
}

model SiteMember {
  id     String @id @default(cuid())
  siteId String
  userId String
  role   String @default("Member")

  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([siteId, userId])
  @@map("site_members")
}

model Changeset {
  id          String        @id @default(cuid())
  userId      String
  title       String
  description String?
  status      ChangesetStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User          @relation(fields: [userId], references: [id])
  siteChanges SiteChangeset[]

  @@map("changesets")
}

enum ChangesetStatus {
  PENDING
  COMMITTED
  REVERTED
}

model SiteChangeset {
  id          String   @id @default(cuid())
  changesetId String
  siteId      String
  action      ChangeAction
  oldData     Json?
  newData     Json?
  createdAt   DateTime @default(now())

  changeset Changeset @relation(fields: [changesetId], references: [id], onDelete: Cascade)
  site      Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@map("site_changesets")
}

enum ChangeAction {
  CREATE
  UPDATE
  DELETE
  ASSOCIATE
  DISASSOCIATE
}

model AdminLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("admin_logs")
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}
